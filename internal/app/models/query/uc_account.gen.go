// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ice_flame_gin/internal/app/models/model"
)

func newUcAccount(db *gorm.DB, opts ...gen.DOOption) ucAccount {
	_ucAccount := ucAccount{}

	_ucAccount.ucAccountDo.UseDB(db, opts...)
	_ucAccount.ucAccountDo.UseModel(&model.UcAccount{})

	tableName := _ucAccount.ucAccountDo.TableName()
	_ucAccount.ALL = field.NewAsterisk(tableName)
	_ucAccount.ID = field.NewUint32(tableName, "id")
	_ucAccount.IdentityCardID = field.NewString(tableName, "identity_card_id")
	_ucAccount.Username = field.NewString(tableName, "username")
	_ucAccount.PasswordHash = field.NewString(tableName, "password_hash")
	_ucAccount.Tel = field.NewString(tableName, "tel")
	_ucAccount.Status = field.NewBool(tableName, "status")
	_ucAccount.RealNameType = field.NewBool(tableName, "real_name_type")
	_ucAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_ucAccount.UpdatedAt = field.NewTime(tableName, "updated_at")

	_ucAccount.fillFieldMap()

	return _ucAccount
}

// ucAccount 用户中心
type ucAccount struct {
	ucAccountDo ucAccountDo

	ALL            field.Asterisk
	ID             field.Uint32
	IdentityCardID field.String // 关联用户身份证信息ID
	Username       field.String // 用户名
	PasswordHash   field.String // 用户密码
	Tel            field.String // 用户手机号码
	Status         field.Bool   // 用户状态(0.启用1.停用)
	RealNameType   field.Bool   // 实名状态1=未实名2=已上传未审核3=审核驳回4=实名成功
	CreatedAt      field.Time
	UpdatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (u ucAccount) Table(newTableName string) *ucAccount {
	u.ucAccountDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u ucAccount) As(alias string) *ucAccount {
	u.ucAccountDo.DO = *(u.ucAccountDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *ucAccount) updateTableName(table string) *ucAccount {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint32(table, "id")
	u.IdentityCardID = field.NewString(table, "identity_card_id")
	u.Username = field.NewString(table, "username")
	u.PasswordHash = field.NewString(table, "password_hash")
	u.Tel = field.NewString(table, "tel")
	u.Status = field.NewBool(table, "status")
	u.RealNameType = field.NewBool(table, "real_name_type")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *ucAccount) WithContext(ctx context.Context) *ucAccountDo {
	return u.ucAccountDo.WithContext(ctx)
}

func (u ucAccount) TableName() string { return u.ucAccountDo.TableName() }

func (u ucAccount) Alias() string { return u.ucAccountDo.Alias() }

func (u ucAccount) Columns(cols ...field.Expr) gen.Columns { return u.ucAccountDo.Columns(cols...) }

func (u *ucAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *ucAccount) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["identity_card_id"] = u.IdentityCardID
	u.fieldMap["username"] = u.Username
	u.fieldMap["password_hash"] = u.PasswordHash
	u.fieldMap["tel"] = u.Tel
	u.fieldMap["status"] = u.Status
	u.fieldMap["real_name_type"] = u.RealNameType
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u ucAccount) clone(db *gorm.DB) ucAccount {
	u.ucAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u ucAccount) replaceDB(db *gorm.DB) ucAccount {
	u.ucAccountDo.ReplaceDB(db)
	return u
}

type ucAccountDo struct{ gen.DO }

func (u ucAccountDo) Debug() *ucAccountDo {
	return u.withDO(u.DO.Debug())
}

func (u ucAccountDo) WithContext(ctx context.Context) *ucAccountDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u ucAccountDo) ReadDB() *ucAccountDo {
	return u.Clauses(dbresolver.Read)
}

func (u ucAccountDo) WriteDB() *ucAccountDo {
	return u.Clauses(dbresolver.Write)
}

func (u ucAccountDo) Session(config *gorm.Session) *ucAccountDo {
	return u.withDO(u.DO.Session(config))
}

func (u ucAccountDo) Clauses(conds ...clause.Expression) *ucAccountDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u ucAccountDo) Returning(value interface{}, columns ...string) *ucAccountDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u ucAccountDo) Not(conds ...gen.Condition) *ucAccountDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u ucAccountDo) Or(conds ...gen.Condition) *ucAccountDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u ucAccountDo) Select(conds ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u ucAccountDo) Where(conds ...gen.Condition) *ucAccountDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u ucAccountDo) Order(conds ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u ucAccountDo) Distinct(cols ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u ucAccountDo) Omit(cols ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u ucAccountDo) Join(table schema.Tabler, on ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u ucAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u ucAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u ucAccountDo) Group(cols ...field.Expr) *ucAccountDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u ucAccountDo) Having(conds ...gen.Condition) *ucAccountDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u ucAccountDo) Limit(limit int) *ucAccountDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u ucAccountDo) Offset(offset int) *ucAccountDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u ucAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ucAccountDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u ucAccountDo) Unscoped() *ucAccountDo {
	return u.withDO(u.DO.Unscoped())
}

func (u ucAccountDo) Create(values ...*model.UcAccount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u ucAccountDo) CreateInBatches(values []*model.UcAccount, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u ucAccountDo) Save(values ...*model.UcAccount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u ucAccountDo) First() (*model.UcAccount, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UcAccount), nil
	}
}

func (u ucAccountDo) Take() (*model.UcAccount, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UcAccount), nil
	}
}

func (u ucAccountDo) Last() (*model.UcAccount, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UcAccount), nil
	}
}

func (u ucAccountDo) Find() ([]*model.UcAccount, error) {
	result, err := u.DO.Find()
	return result.([]*model.UcAccount), err
}

func (u ucAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UcAccount, err error) {
	buf := make([]*model.UcAccount, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u ucAccountDo) FindInBatches(result *[]*model.UcAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u ucAccountDo) Attrs(attrs ...field.AssignExpr) *ucAccountDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u ucAccountDo) Assign(attrs ...field.AssignExpr) *ucAccountDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u ucAccountDo) Joins(fields ...field.RelationField) *ucAccountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u ucAccountDo) Preload(fields ...field.RelationField) *ucAccountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u ucAccountDo) FirstOrInit() (*model.UcAccount, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UcAccount), nil
	}
}

func (u ucAccountDo) FirstOrCreate() (*model.UcAccount, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UcAccount), nil
	}
}

func (u ucAccountDo) FindByPage(offset int, limit int) (result []*model.UcAccount, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u ucAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u ucAccountDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u ucAccountDo) Delete(models ...*model.UcAccount) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *ucAccountDo) withDO(do gen.Dao) *ucAccountDo {
	u.DO = *do.(*gen.DO)
	return u
}
