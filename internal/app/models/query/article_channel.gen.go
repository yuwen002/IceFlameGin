// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ice_flame_gin/internal/app/models/model"
)

func newArticleChannel(db *gorm.DB, opts ...gen.DOOption) articleChannel {
	_articleChannel := articleChannel{}

	_articleChannel.articleChannelDo.UseDB(db, opts...)
	_articleChannel.articleChannelDo.UseModel(&model.ArticleChannel{})

	tableName := _articleChannel.articleChannelDo.TableName()
	_articleChannel.ALL = field.NewAsterisk(tableName)
	_articleChannel.ID = field.NewUint32(tableName, "id")
	_articleChannel.Name = field.NewString(tableName, "name")
	_articleChannel.Remark = field.NewString(tableName, "remark")
	_articleChannel.Sort = field.NewUint32(tableName, "sort")
	_articleChannel.Status = field.NewUint32(tableName, "status")
	_articleChannel.CreatedAt = field.NewTime(tableName, "created_at")
	_articleChannel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_articleChannel.fillFieldMap()

	return _articleChannel
}

// articleChannel 频道分类
type articleChannel struct {
	articleChannelDo articleChannelDo

	ALL       field.Asterisk
	ID        field.Uint32
	Name      field.String // 栏目名称
	Remark    field.String // 备注信息
	Sort      field.Uint32 // 排序顺序
	Status    field.Uint32 // 显示状态（0=显示，1=隐藏）
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a articleChannel) Table(newTableName string) *articleChannel {
	a.articleChannelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleChannel) As(alias string) *articleChannel {
	a.articleChannelDo.DO = *(a.articleChannelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleChannel) updateTableName(table string) *articleChannel {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Remark = field.NewString(table, "remark")
	a.Sort = field.NewUint32(table, "sort")
	a.Status = field.NewUint32(table, "status")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *articleChannel) WithContext(ctx context.Context) *articleChannelDo {
	return a.articleChannelDo.WithContext(ctx)
}

func (a articleChannel) TableName() string { return a.articleChannelDo.TableName() }

func (a articleChannel) Alias() string { return a.articleChannelDo.Alias() }

func (a articleChannel) Columns(cols ...field.Expr) gen.Columns {
	return a.articleChannelDo.Columns(cols...)
}

func (a *articleChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleChannel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a articleChannel) clone(db *gorm.DB) articleChannel {
	a.articleChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleChannel) replaceDB(db *gorm.DB) articleChannel {
	a.articleChannelDo.ReplaceDB(db)
	return a
}

type articleChannelDo struct{ gen.DO }

func (a articleChannelDo) Debug() *articleChannelDo {
	return a.withDO(a.DO.Debug())
}

func (a articleChannelDo) WithContext(ctx context.Context) *articleChannelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleChannelDo) ReadDB() *articleChannelDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleChannelDo) WriteDB() *articleChannelDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleChannelDo) Session(config *gorm.Session) *articleChannelDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleChannelDo) Clauses(conds ...clause.Expression) *articleChannelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleChannelDo) Returning(value interface{}, columns ...string) *articleChannelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleChannelDo) Not(conds ...gen.Condition) *articleChannelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleChannelDo) Or(conds ...gen.Condition) *articleChannelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleChannelDo) Select(conds ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleChannelDo) Where(conds ...gen.Condition) *articleChannelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleChannelDo) Order(conds ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleChannelDo) Distinct(cols ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleChannelDo) Omit(cols ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleChannelDo) Join(table schema.Tabler, on ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleChannelDo) Group(cols ...field.Expr) *articleChannelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleChannelDo) Having(conds ...gen.Condition) *articleChannelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleChannelDo) Limit(limit int) *articleChannelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleChannelDo) Offset(offset int) *articleChannelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *articleChannelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleChannelDo) Unscoped() *articleChannelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleChannelDo) Create(values ...*model.ArticleChannel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleChannelDo) CreateInBatches(values []*model.ArticleChannel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleChannelDo) Save(values ...*model.ArticleChannel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleChannelDo) First() (*model.ArticleChannel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleChannel), nil
	}
}

func (a articleChannelDo) Take() (*model.ArticleChannel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleChannel), nil
	}
}

func (a articleChannelDo) Last() (*model.ArticleChannel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleChannel), nil
	}
}

func (a articleChannelDo) Find() ([]*model.ArticleChannel, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleChannel), err
}

func (a articleChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleChannel, err error) {
	buf := make([]*model.ArticleChannel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleChannelDo) FindInBatches(result *[]*model.ArticleChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleChannelDo) Attrs(attrs ...field.AssignExpr) *articleChannelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleChannelDo) Assign(attrs ...field.AssignExpr) *articleChannelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleChannelDo) Joins(fields ...field.RelationField) *articleChannelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleChannelDo) Preload(fields ...field.RelationField) *articleChannelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleChannelDo) FirstOrInit() (*model.ArticleChannel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleChannel), nil
	}
}

func (a articleChannelDo) FirstOrCreate() (*model.ArticleChannel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleChannel), nil
	}
}

func (a articleChannelDo) FindByPage(offset int, limit int) (result []*model.ArticleChannel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleChannelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleChannelDo) Delete(models ...*model.ArticleChannel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleChannelDo) withDO(do gen.Dao) *articleChannelDo {
	a.DO = *do.(*gen.DO)
	return a
}
