// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ice_flame_gin/internal/app/models/model"
)

func newSinglePage(db *gorm.DB, opts ...gen.DOOption) singlePage {
	_singlePage := singlePage{}

	_singlePage.singlePageDo.UseDB(db, opts...)
	_singlePage.singlePageDo.UseModel(&model.SinglePage{})

	tableName := _singlePage.singlePageDo.TableName()
	_singlePage.ALL = field.NewAsterisk(tableName)
	_singlePage.ID = field.NewUint32(tableName, "id")
	_singlePage.Title = field.NewString(tableName, "title")
	_singlePage.Description = field.NewString(tableName, "description")
	_singlePage.Keyword = field.NewString(tableName, "keyword")
	_singlePage.Content = field.NewString(tableName, "content")
	_singlePage.Thumbnail = field.NewString(tableName, "thumbnail")
	_singlePage.Click = field.NewUint32(tableName, "click")
	_singlePage.Status = field.NewUint32(tableName, "status")
	_singlePage.CreatedAt = field.NewTime(tableName, "created_at")
	_singlePage.UpdatedAt = field.NewTime(tableName, "updated_at")

	_singlePage.fillFieldMap()

	return _singlePage
}

type singlePage struct {
	singlePageDo singlePageDo

	ALL         field.Asterisk
	ID          field.Uint32
	Title       field.String // 页面标题
	Description field.String // 页面描述
	Keyword     field.String // 页面关键字
	Content     field.String // 页面内容
	Thumbnail   field.String // 缩略图
	Click       field.Uint32 // 点击量
	Status      field.Uint32 // 显示状态（0=显示，1=隐藏）
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (s singlePage) Table(newTableName string) *singlePage {
	s.singlePageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s singlePage) As(alias string) *singlePage {
	s.singlePageDo.DO = *(s.singlePageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *singlePage) updateTableName(table string) *singlePage {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.Title = field.NewString(table, "title")
	s.Description = field.NewString(table, "description")
	s.Keyword = field.NewString(table, "keyword")
	s.Content = field.NewString(table, "content")
	s.Thumbnail = field.NewString(table, "thumbnail")
	s.Click = field.NewUint32(table, "click")
	s.Status = field.NewUint32(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *singlePage) WithContext(ctx context.Context) *singlePageDo {
	return s.singlePageDo.WithContext(ctx)
}

func (s singlePage) TableName() string { return s.singlePageDo.TableName() }

func (s singlePage) Alias() string { return s.singlePageDo.Alias() }

func (s singlePage) Columns(cols ...field.Expr) gen.Columns { return s.singlePageDo.Columns(cols...) }

func (s *singlePage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *singlePage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["description"] = s.Description
	s.fieldMap["keyword"] = s.Keyword
	s.fieldMap["content"] = s.Content
	s.fieldMap["thumbnail"] = s.Thumbnail
	s.fieldMap["click"] = s.Click
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s singlePage) clone(db *gorm.DB) singlePage {
	s.singlePageDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s singlePage) replaceDB(db *gorm.DB) singlePage {
	s.singlePageDo.ReplaceDB(db)
	return s
}

type singlePageDo struct{ gen.DO }

func (s singlePageDo) Debug() *singlePageDo {
	return s.withDO(s.DO.Debug())
}

func (s singlePageDo) WithContext(ctx context.Context) *singlePageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s singlePageDo) ReadDB() *singlePageDo {
	return s.Clauses(dbresolver.Read)
}

func (s singlePageDo) WriteDB() *singlePageDo {
	return s.Clauses(dbresolver.Write)
}

func (s singlePageDo) Session(config *gorm.Session) *singlePageDo {
	return s.withDO(s.DO.Session(config))
}

func (s singlePageDo) Clauses(conds ...clause.Expression) *singlePageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s singlePageDo) Returning(value interface{}, columns ...string) *singlePageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s singlePageDo) Not(conds ...gen.Condition) *singlePageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s singlePageDo) Or(conds ...gen.Condition) *singlePageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s singlePageDo) Select(conds ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s singlePageDo) Where(conds ...gen.Condition) *singlePageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s singlePageDo) Order(conds ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s singlePageDo) Distinct(cols ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s singlePageDo) Omit(cols ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s singlePageDo) Join(table schema.Tabler, on ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s singlePageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s singlePageDo) RightJoin(table schema.Tabler, on ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s singlePageDo) Group(cols ...field.Expr) *singlePageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s singlePageDo) Having(conds ...gen.Condition) *singlePageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s singlePageDo) Limit(limit int) *singlePageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s singlePageDo) Offset(offset int) *singlePageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s singlePageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *singlePageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s singlePageDo) Unscoped() *singlePageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s singlePageDo) Create(values ...*model.SinglePage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s singlePageDo) CreateInBatches(values []*model.SinglePage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s singlePageDo) Save(values ...*model.SinglePage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s singlePageDo) First() (*model.SinglePage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SinglePage), nil
	}
}

func (s singlePageDo) Take() (*model.SinglePage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SinglePage), nil
	}
}

func (s singlePageDo) Last() (*model.SinglePage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SinglePage), nil
	}
}

func (s singlePageDo) Find() ([]*model.SinglePage, error) {
	result, err := s.DO.Find()
	return result.([]*model.SinglePage), err
}

func (s singlePageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SinglePage, err error) {
	buf := make([]*model.SinglePage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s singlePageDo) FindInBatches(result *[]*model.SinglePage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s singlePageDo) Attrs(attrs ...field.AssignExpr) *singlePageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s singlePageDo) Assign(attrs ...field.AssignExpr) *singlePageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s singlePageDo) Joins(fields ...field.RelationField) *singlePageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s singlePageDo) Preload(fields ...field.RelationField) *singlePageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s singlePageDo) FirstOrInit() (*model.SinglePage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SinglePage), nil
	}
}

func (s singlePageDo) FirstOrCreate() (*model.SinglePage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SinglePage), nil
	}
}

func (s singlePageDo) FindByPage(offset int, limit int) (result []*model.SinglePage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s singlePageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s singlePageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s singlePageDo) Delete(models ...*model.SinglePage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *singlePageDo) withDO(do gen.Dao) *singlePageDo {
	s.DO = *do.(*gen.DO)
	return s
}
